/*
Napisz program, który uruchomi 100 procesów potomnych w taki sposób, że będzie jeden rodzic i 100 potomków.
Proces główny niech oczekuje na zakończenie wszystkich procesów potomnych.

Przydatne funkcje: waitpid i wait
*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

#define procCount 100

int main() {
    pid_t child;
    int i;
    int status;
    pid_t wpid;

    for (i = 0; i < procCount; i++) {
        child = fork();

        if (child < 0) {
            printf("Blad podczas tworzenia procesu.\n");
            return 1;
        } else if (child == 0) {
            printf("Proces potomny %d, PID: %d, PPID: %d\n", i + 1, getpid(), getppid());
            exit(0);
        }
    }

    for (i = 0; i < procCount; i++) {
        wpid = waitpid(-1, &status, 0);
        if (wpid == -1) {
            perror("waitpid");
            exit(EXIT_FAILURE);
        }
        if (WIFEXITED(status)) {
            printf("Proces potomny PID %d zakonczyl dzialanie z kodem %d\n", wpid, WEXITSTATUS(status));
        } else {
            printf("Proces potomny PID %d zakonczył dzialanie w sposob nieoczekiwany\n", wpid);
        }
    }

    printf("Wszystkie procesy potomne zakonczyły dzialanie.\n");

    return 0;
}
